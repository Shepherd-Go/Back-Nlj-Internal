// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	dtos "github.com/Shepherd-Go/Back-Nlj-Internal.git/dtos"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// Employee is an autogenerated mock type for the Employee type
type Employee struct {
	mock.Mock
}

// CreateEmployee provides a mock function with given fields: ctx, empl
func (_m *Employee) CreateEmployee(ctx context.Context, empl dtos.RegisterEmployee) error {
	ret := _m.Called(ctx, empl)

	if len(ret) == 0 {
		panic("no return value specified for CreateEmployee")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, dtos.RegisterEmployee) error); ok {
		r0 = rf(ctx, empl)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteEmployee provides a mock function with given fields: ctx, id
func (_m *Employee) DeleteEmployee(ctx context.Context, id uuid.UUID) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteEmployee")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ForgotPassword provides a mock function with given fields: ctx, email
func (_m *Employee) ForgotPassword(ctx context.Context, email string) error {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for ForgotPassword")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetEmployees provides a mock function with given fields: ctx
func (_m *Employee) GetEmployees(ctx context.Context) (dtos.Employees, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetEmployees")
	}

	var r0 dtos.Employees
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (dtos.Employees, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) dtos.Employees); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(dtos.Employees)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateEmployees provides a mock function with given fields: ctx, id, empl
func (_m *Employee) UpdateEmployees(ctx context.Context, id uuid.UUID, empl dtos.UpdateEmployee) error {
	ret := _m.Called(ctx, id, empl)

	if len(ret) == 0 {
		panic("no return value specified for UpdateEmployees")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, dtos.UpdateEmployee) error); ok {
		r0 = rf(ctx, id, empl)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewEmployee creates a new instance of Employee. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEmployee(t interface {
	mock.TestingT
	Cleanup(func())
}) *Employee {
	mock := &Employee{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
