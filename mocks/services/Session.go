// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	dtos "github.com/BBCompanyca/Back-Nlj-Internal.git/dtos"
	mock "github.com/stretchr/testify/mock"
)

// Session is an autogenerated mock type for the Session type
type Session struct {
	mock.Mock
}

// Session provides a mock function with given fields: ctx, login
func (_m *Session) Session(ctx context.Context, login dtos.Login) (dtos.EmployeeResponse, error) {
	ret := _m.Called(ctx, login)

	if len(ret) == 0 {
		panic("no return value specified for Session")
	}

	var r0 dtos.EmployeeResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dtos.Login) (dtos.EmployeeResponse, error)); ok {
		return rf(ctx, login)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dtos.Login) dtos.EmployeeResponse); ok {
		r0 = rf(ctx, login)
	} else {
		r0 = ret.Get(0).(dtos.EmployeeResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, dtos.Login) error); ok {
		r1 = rf(ctx, login)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewSession creates a new instance of Session. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSession(t interface {
	mock.TestingT
	Cleanup(func())
}) *Session {
	mock := &Session{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
