// Code generated by mockery. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Password is an autogenerated mock type for the Password type
type Password struct {
	mock.Mock
}

// CheckPasswordHash provides a mock function with given fields: phash, password
func (_m *Password) CheckPasswordHash(phash []byte, password string) bool {
	ret := _m.Called(phash, password)

	if len(ret) == 0 {
		panic("no return value specified for CheckPasswordHash")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func([]byte, string) bool); ok {
		r0 = rf(phash, password)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// GenerateTemporaryPassword provides a mock function with given fields:
func (_m *Password) GenerateTemporaryPassword() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GenerateTemporaryPassword")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// HashPassword provides a mock function with given fields: password
func (_m *Password) HashPassword(password *string) {
	_m.Called(password)
}

// NewPassword creates a new instance of Password. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPassword(t interface {
	mock.TestingT
	Cleanup(func())
}) *Password {
	mock := &Password{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
